//Algorithm—No (Large) Additional Memory
void removeDuplicate(char *str)
{
	if(str){
		bool char_set[256];
		int tail = 0;
		memset(char_set,0,256 * sizeof(bool));
		for(int i = 0; str[i]; i++){
			if(!char_set[str[i]]){
				str[tail++] = str[i];
				char_set[str[i]] = true;
			}
		}
		str[tail] = '\0';
	}
}

//Algorithm—With Additional Memory of Constant Size 
void removeDuplicate(char *str)
{
	if(str){
		int tail = 1;
		int n = strlen(str);
		int i, j;
		for(i = 0; i < n; ++i){
			for(j = 0; j < tail; ++j)
				if(str[i] == str[j]) break;
			if(j == tail) str[tail++] = str[i];
		}
		str[tail] = 0;
	}
}
